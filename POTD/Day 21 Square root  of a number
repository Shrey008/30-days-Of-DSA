 class Solution {
    long floorSqrt(long n) {
        // Base case: if n is 0 or 1, return n itself
        if (n == 0 || n == 1) {
            return n;
        }

        // Binary search variables
        long start = 1, end = n;
        long result = 0;

        // Binary search loop
        while (start <= end) {
            long mid = start + (end - start) / 2;

            // If mid*mid is exactly equal to n
            if (mid * mid == n) {
                return mid;
            }

            // If mid*mid is less than n, move to the right half
            if (mid * mid < n) {
                start = mid + 1;
                result = mid; // Track mid as a possible floor value
            } else {
                // If mid*mid is greater than n, move to the left half
                end = mid - 1;
            }
        }

        // Return the floor value of the square root
        return result;
    }
}
