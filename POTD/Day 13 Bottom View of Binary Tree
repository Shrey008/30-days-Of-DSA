class Solution {
    public ArrayList<Integer> bottomView(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        
        TreeMap<Integer, Integer> bottomViewMap = new TreeMap<>();
        
        
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root, 0));
        
        while (!queue.isEmpty()) {
            Pair current = queue.poll();
            Node currentNode = current.node;
            int hd = current.hd;
            
          
            bottomViewMap.put(hd, currentNode.data);
            
            
            if (currentNode.left != null) {
                queue.add(new Pair(currentNode.left, hd - 1));
            }
            
            if (currentNode.right != null) {
                queue.add(new Pair(currentNode.right, hd + 1));
            }
        }
        
        
        for (Map.Entry<Integer, Integer> entry : bottomViewMap.entrySet()) {
            result.add(entry.getValue());
        }
        
        return result;
    }
    
    
    class Pair {
        Node node;
        int hd;
        
        public Pair(Node node, int hd) {
            this.node = node;
            this.hd = hd;
        }
    }
}

 
