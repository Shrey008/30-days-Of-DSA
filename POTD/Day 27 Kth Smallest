class Solution {
    public static int kthSmallest(int[] arr, int k) {
        return quickSelect(arr, 0, arr.length - 1, k - 1);
    }
    
    private static int quickSelect(int[] arr, int left, int right, int k) {
        if (left == right) { 
            return arr[left];
        }

        
        Random random = new Random();
        int pivotIndex = left + random.nextInt(right - left + 1);

         
        pivotIndex = partition(arr, left, right, pivotIndex);

         
        if (k == pivotIndex) {
            return arr[k];
        } else if (k < pivotIndex) {
            return quickSelect(arr, left, pivotIndex - 1, k);
        } else {
            return quickSelect(arr, pivotIndex + 1, right, k);
        }
    }
    
    private static int partition(int[] arr, int left, int right, int pivotIndex) {
        int pivotValue = arr[pivotIndex];
        // Move pivot to end
        swap(arr, pivotIndex, right);
        int storeIndex = left;

        // Move all elements smaller than pivotValue to the left
        for (int i = left; i < right; i++) {
            if (arr[i] < pivotValue) {
                swap(arr, i, storeIndex);
                storeIndex++;
            }
        }

        // Move pivot to its final place
        swap(arr, storeIndex, right);
        return storeIndex;
    }
    
    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
